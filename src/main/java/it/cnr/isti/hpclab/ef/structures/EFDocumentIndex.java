package it.cnr.isti.hpclab.ef.structures;

import it.cnr.isti.hpclab.ef.EliasFano;
import it.unimi.dsi.io.InputBitStream;
import it.unimi.dsi.io.OutputBitStream;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.log4j.Logger;
import org.terrier.structures.DocumentIndex;
import org.terrier.structures.DocumentIndexEntry;
import org.terrier.structures.Index;
//import org.terrier.structures.FSADocumentIndex;
import org.terrier.structures.IndexOnDisk;

/**
 * New implementation of the default Terrier document index.
 * It is a lightweight implementation, where only document lengths are stored, 
 * and loaded uncompressed in main memory at construction time.
 * This new document index is automatically generated by the Elias-Fano index conversion processes.
 */
public class EFDocumentIndex implements DocumentIndex
{
	private static Logger LOGGER = Logger.getLogger( EFDocumentIndex.class );
	
	private final int[] docLengths;
	
	/**
	 * Constructor.
	 * @param index the Elias-Fano index containing the document index
	 * @throws IOException is something goes wrong in opening/accessing/closing the document index file
	 */
	public EFDocumentIndex(final IndexOnDisk index) throws IOException
	{
		this(index.getPath() + File.separator + index.getPrefix() + EliasFano.SIZE_EXTENSION, index.getCollectionStatistics().getNumberOfDocuments());
	}
	
	/**
	 * Constructor
	 * @param path the file path of the Elias-Fano index containing the document index
	 * @param size the number of documents to read
	 * @throws IOException is something goes wrong in opening/accessing/closing the document index file
	 */
	public EFDocumentIndex(final String path, final int size) throws IOException
	{
		docLengths = new int[size];
		final InputBitStream in = new InputBitStream( new FileInputStream( path ), false );
		LOGGER.debug( "Loading document lengths..." );
		in.readGammas( docLengths, docLengths.length );		  
		LOGGER.debug( "Completed." );
		in.close();
	}
	
	@Override
	public DocumentIndexEntry getDocumentEntry(final int docid) throws IOException 
	{
		throw new RuntimeException("Shold not be invoked");
	}

	/** {@inheritDoc} */
	@Override
	public int getDocumentLength(final int docid) throws IOException 
	{
		return docLengths[docid];
	}

	/** {@inheritDoc} */
	@Override
	public int getNumberOfDocuments() 
	{
		return docLengths.length;
	}

	/**
	 * Static methods to store an int array in a gamma-encoded sequence on file
	 * @param index the document index containing the integer to encode and write to file.
	 * @param path the destination file
	 * @throws IOException is something goes wrong in opening/accessing/closing the document index file 
	 */
	public static void write(final DocumentIndex index, final String path) throws IOException
	{
		final OutputBitStream out = new OutputBitStream( new FileOutputStream(path));
		for (int i = 0; i < index.getNumberOfDocuments(); i++)
			out.writeGamma(index.getDocumentLength(i));
		out.close();
	}
	
	public static void main(String[] args) throws IOException
	{
		Index.setIndexLoadingProfileAsRetrieval(false);
		Index idx = Index.createIndex();
		if (idx == null) {
			LOGGER.error("No such index : "+ Index.getLastIndexLoadError());				
		} else {
			DocumentIndex di = new EFDocumentIndex((IndexOnDisk) idx);
			for (int i = 0; i < di.getNumberOfDocuments(); i++) {
				System.out.println(di.getDocumentLength(i));
			}
		}
	}
}
